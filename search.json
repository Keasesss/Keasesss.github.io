[{"title":"spring头信息解析","url":"http://koxys.top/spring头信息解析/","content":"<h4 id=\"最近在搞spring-发现其配置文件applicationContext-xml头信息非常麻烦，很好奇是什么意思，在网上找了点资料大概了解如下：\"><a href=\"#最近在搞spring-发现其配置文件applicationContext-xml头信息非常麻烦，很好奇是什么意思，在网上找了点资料大概了解如下：\" class=\"headerlink\" title=\"最近在搞spring,发现其配置文件applicationContext.xml头信息非常麻烦，很好奇是什么意思，在网上找了点资料大概了解如下：\"></a>最近在搞spring,发现其配置文件<code>applicationContext.xml</code>头信息非常麻烦，很好奇是什么意思，在网上找了点资料大概了解如下：</h4><p>以下为常见的内容</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\nxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\nxmlns:context=&quot;http://www.springframework.org/schema/context&quot;\nxmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;\nxmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;\nxsi:schemaLocation=&quot;http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context.xsd\nhttp://www.springframework.org/schema/aop\nhttp://www.springframework.org/schema/aop/spring-aop.xsd\nhttp://www.springframework.org/schema/tx\nhttp://www.springframework.org/schema/tx/spring-tx.xsd &quot;&gt;\n</code></pre><p>其中:</p>\n<ul>\n<li><code>&lt;?xml&gt;</code>是xml文件的信息</li>\n<li><code>xmlns</code>全称xmlnamespace，是xml的命名空间信息。如第一行：<br><code>xmlns=&quot;http://www.springframework.org/schema/beans</code>为默认命名空间<br><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>为xsi。<br>声明这些东西意义在于在声明之后可以在文件中使用对应的标签。</li>\n<li>在前面的<code>xmlns</code>只是声明了标签，而<code>xsi:schemaLocation</code>则是语法规则契约，=等号后面的内容就是引入的具体的标签库和对应的要在文本中使用的标签库具体版本规则的地址。</li>\n<li>如果需要找到各个location在哪，只需要在各大标签定义的jar包里找到对应的schema文件即可。</li>\n<li>注意：在xsi-schemaLocation中最后一个http:…..与双引号”之间要有一个空格，否则会找不到地址报错。</li>\n</ul>\n<h4 id=\"ref-参考1\"><a href=\"#ref-参考1\" class=\"headerlink\" title=\"ref:参考1\"></a>ref:<a href=\"http://leeqq.iteye.com/blog/2330226\" target=\"_blank\" rel=\"noopener\">参考1</a></h4><h4 id=\"nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-参考2\"><a href=\"#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-参考2\" class=\"headerlink\" title=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考2\"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"http://www.cnblogs.com/as-dreamer/p/6523215.html\" target=\"_blank\" rel=\"noopener\">参考2</a></h4>","categories":[],"tags":["spring","xml"]},{"title":"IDEA使用资料","url":"http://koxys.top/IDEA使用资料/","content":"<h4 id=\"以下内容均为网络资源，此文章仅是资源收集\"><a href=\"#以下内容均为网络资源，此文章仅是资源收集\" class=\"headerlink\" title=\"以下内容均为网络资源，此文章仅是资源收集\"></a>以下内容均为网络资源，此文章仅是资源收集</h4><p><a href=\"https://raw.githubusercontent.com/Keasesss/Keasesss.github.io/master/attachments/idea%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B2017-06-01.pdf\" target=\"_blank\" rel=\"noopener\">IDEA使用手册</a><br><br><a href=\"http://blog.csdn.net/lw_power/article/details/51113946\" target=\"_blank\" rel=\"noopener\">IDEA中创建web项目相关说明</a></p>\n","categories":[],"tags":["IDEA","Collections"]},{"title":"Class对象的获取方法","url":"http://koxys.top/Class对象的获取方法/","content":"<ul>\n<li><p>类名.class获取<br>如 String.class<br>该方法是静态获取，在类的解析阶段获取</p>\n</li>\n<li><p>实例对象.getClass()<br>该方法是动态的，在程序运行时动态获取</p>\n</li>\n<li><p>Static Class.forname(String)<br>该方法动态获取类对象，并使虚拟机动态加载该类</p>\n</li>\n</ul>\n","categories":[],"tags":["Java","tips"]},{"title":"异步、同步与阻塞、非阻塞","url":"http://koxys.top/异步、同步与阻塞、非阻塞/","content":"<h3 id=\"异步、同步、阻塞、非阻塞\"><a href=\"#异步、同步、阻塞、非阻塞\" class=\"headerlink\" title=\"异步、同步、阻塞、非阻塞\"></a>异步、同步、阻塞、非阻塞</h3><h4 id=\"1-异步与同步\"><a href=\"#1-异步与同步\" class=\"headerlink\" title=\"1.异步与同步\"></a>1.异步与同步</h4><p>同步简单来说就是对一种通信方式的描述，以HTTP请求为例。<br>指的是在通信的过程中，请求发送给服务器后，服务器由于不能立即返回结果而导致通信的结果无法立即响应，而请求方不能立即得到响应的方式。</p>\n<p>异步则是相对同步来说的另外一种通信方式，即服务器在接受到请求的同时立即做出响应或者不响应，尽管可能并不能返回需要的结果，但是浏览器端会立即放下本次通信，而服务器在随后会在得到正确的结果之后再次发送响应给予浏览器需要的结果。在此期间浏览器也可以再次发送请求查询进度。</p>\n<h4 id=\"2-阻塞与非阻塞\"><a href=\"#2-阻塞与非阻塞\" class=\"headerlink\" title=\"2.阻塞与非阻塞\"></a>2.阻塞与非阻塞</h4><p>所谓阻塞与非阻塞，其实和同步与异步的描述对象是完全不一样的。以HTTP为例，阻塞与非阻塞描述的是在浏览器在等待响应时的真空期线程所采取的行为，阻塞即是线程挂起，不执行其他行为，而是等待响应结果，非阻塞则是线程不只等待，而是会去执行其他任务。</p>\n","categories":[],"tags":["tips","coding"]},{"title":"Hexo的坑s","url":"http://koxys.top/Hexo的坑s/","content":"<h3 id=\"关于hexo配置中的坑\"><a href=\"#关于hexo配置中的坑\" class=\"headerlink\" title=\"关于hexo配置中的坑\"></a>关于hexo配置中的坑</h3><h5 id=\"在搭建hexo时，运行-hexo-d-指令的时候，在已经安装了hexo-deployer-git之后总是出现ERROR-Deployer-not-found-git-。在网上查了很久试了无数方法，无果，非常难受，无意间在github中看见一网友的回复中提到了要在配置文件中加上\"><a href=\"#在搭建hexo时，运行-hexo-d-指令的时候，在已经安装了hexo-deployer-git之后总是出现ERROR-Deployer-not-found-git-。在网上查了很久试了无数方法，无果，非常难受，无意间在github中看见一网友的回复中提到了要在配置文件中加上\" class=\"headerlink\" title=\"在搭建hexo时，运行 $ hexo d 指令的时候，在已经安装了hexo-deployer-git之后总是出现ERROR Deployer not found: git 。在网上查了很久试了无数方法，无果，非常难受，无意间在github中看见一网友的回复中提到了要在配置文件中加上\"></a>在搭建hexo时，运行 $ hexo d 指令的时候，在已经安装了hexo-deployer-git之后总是出现ERROR Deployer not found: git 。在网上查了很久试了无数方法，无果，非常难受，无意间在github中看见一网友的回复中提到了要在配置文件中加上</h5><pre><code>plugins:\n -hexo-server\n -hexo-deployer-git\n</code></pre><p>试了一下，成功了T T,悲喜交集…..</p>\n<h5 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h5><p>发现原来原因是package.jason中没标识相关依赖，在yml中设置会有bug，所以下载node_module的时候要在blog文件中install –save而不是-g</p>\n<ul>\n<li>npm小知识</li>\n<li>npm install -g 全局下载</li>\n<li>npm install 直接在当前文件夹下载</li>\n</ul>\n","categories":[],"tags":["Hexo","BUG and DEBUG"]},{"title":"有关在Github中取用图片的资源","url":"http://koxys.top/有关在Github中存取图片的资源/","content":"<p>近日，我搭blog时要用图片，发现很多主题的background-image都不能使用，在尝试过很多方法，如相对路径、绝对路径、直接复制磁盘路径均无效，之后只能用github资源<br><strong>（此问题待解决）</strong></p>\n<p>在github中push了几个图片后直接复制url无效，经研究发现问题如下：</p>\n<p>在github中载入图片应当使用其download的url，而该url与项目中打开的url是不一致的，无法拼接出来，必须点击 <em>download</em> 按钮进入相关界面才能获取其url</p>\n<p>另：该url其实是有规律的，不过我懒，不打算记。</p>\n","categories":[],"tags":["BUG and DEBUG","Github"]},{"title":"Hexo自定义置顶功能实现","url":"http://koxys.top/Hexo自定义置顶/","content":"<p>因原主题不支持置顶功能，故查询网上资料学了一哈，大致如下<br>以下代码即<br><em>hexo-generator-index\\lib\\generator.js</em> 中的一段代码</p>\n<p>注释“Top排序”即为需要加入的代码块，其实现其实很简单，就是抽取文章 <em>font-matter</em> 中的 <em>top</em> 属性值进行比较后排序，值大者在前。</p>\n<pre><code>&apos;use strict&apos;;\n\nvar pagination = require(&apos;hexo-pagination&apos;);\n\nmodule.exports = function(locals) {\n  var config = this.config;\n  var posts = locals.posts.sort(config.index_generator.order_by);\n  var paginationDir = config.pagination_dir || &apos;page&apos;;\n  var path = config.index_generator.path || &apos;&apos;;\n\n  //Top排序开始\n  posts.data = posts.data.sort(function(a, b) {\n      if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义\n          if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n          else return b.top - a.top; // 否则按照top值降序排\n      }\n      else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n          return -1;\n      }\n      else if(!a.top &amp;&amp; b.top) {\n          return 1;\n      }\n      else return b.date - a.date; // 都没定义按照文章日期降序排\n  });\n  //Top排序结束\n\n  return pagination(path, posts, {\n    perPage: config.index_generator.per_page,\n    layout: [&apos;index&apos;, &apos;archive&apos;],\n    format: paginationDir + &apos;/%d/&apos;,\n    data: {\n      __index: true\n    }\n  });\n\n\n};\n</code></pre><p><strong>参考：<a href=\"http://zhwhong.ml/2017/03/23/deal-with-hexo-article-top-problem/\" target=\"_blank\" rel=\"noopener\">直接参考</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener\">间接参考</a></strong></p>\n","categories":["Hexo","功能实现"],"tags":["Hexo","功能实现"]},{"title":"Hello World --序言","url":"http://koxys.top/hello-world/","content":"<h2 id=\"写在前面：本博客主要记载编程相关内容，兼职扯皮\"><a href=\"#写在前面：本博客主要记载编程相关内容，兼职扯皮\" class=\"headerlink\" title=\"写在前面：本博客主要记载编程相关内容，兼职扯皮\"></a>写在前面：本博客主要记载编程相关内容，兼职扯皮</h2><ul>\n<li>欢迎光临神秘商店 <br><br><br>说起为什么要建立本博客，主要还是为了便于记录在学习中的所得所想，本人记忆能力实在着急，字迹更是不堪，且为响应科技强国的号召，<br>故决定自建博客进行记录，那么相信聪明的朋友要问了，那么多博客网站可以用，为什么要自建呢？当然是为了装逼啊：）。</li>\n</ul>\n<p><br><br>Update:最近本想把以前的纸质资料整理下发上来的，结果做了一篇感觉没有那个必要。对于比较系统的如JDBC的基本使用这样的东西，心情好的时候可以看文档，心情不好可以google后者baidu,加之要整理并上传确实比较费时费力，没有那个必要，故本博客还是以零碎的日常内容为主。</p>\n<hr>\n<h5 id=\"Warning：本博客主要记录个人日常所得，内容偏口语、重日常，比较琐碎，且条理性一般。可能有系统性的内容，不过这个“可能”和“系统”的数值与本人“懒惰”程度有关。\"><a href=\"#Warning：本博客主要记录个人日常所得，内容偏口语、重日常，比较琐碎，且条理性一般。可能有系统性的内容，不过这个“可能”和“系统”的数值与本人“懒惰”程度有关。\" class=\"headerlink\" title=\"Warning：本博客主要记录个人日常所得，内容偏口语、重日常，比较琐碎，且条理性一般。可能有系统性的内容，不过这个“可能”和“系统”的数值与本人“懒惰”程度有关。\"></a><font color=\"red\">Warning：本博客主要记录个人日常所得，内容偏口语、重日常，比较琐碎，且条理性一般。<br>可能有系统性的内容，不过这个“可能”和“系统”的数值与本人“懒惰”程度有关。</font></h5>","categories":["序言"],"tags":["序言","中文"]}]